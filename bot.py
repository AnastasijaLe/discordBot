import discord
from discord.ext import commands, tasks
import sqlite3
from datetime import date, datetime, timedelta 
import aiohttp
import asyncio
import os
from PIL import Image
from io import BytesIO
from reportlab.lib.pagesizes import landscape, A4
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import tempfile
import time
#from dotenv import load_dotenv

#load_dotenv()

# ====== –ù–ê–°–¢–†–û–ô–ö–ê ======
TOKEN = os.environ.get('DISCORD_TOKEN')
GUILD_ID = int(os.environ.get('GUILD_ID'))
CHANNEL_REPORTS_ID = int(os.environ.get('CHANNEL_REPORTS_ID'))
CHANNEL_APPROVAL_ID = int(os.environ.get('CHANNEL_APPROVAL_ID'))
CHANNEL_DAILY_STATS_ID = int(os.environ.get('CHANNEL_DAILY_STATS_ID'))
CHANNEL_WEEKLY_STATS_ID = int(os.environ.get('CHANNEL_WEEKLY_STATS_ID'))
ROLE_TEST_ID = int(os.environ.get('ROLE_TEST_ID'))
ROLE_MAIN_ID = int(os.environ.get('ROLE_MAIN_ID'))
DAILY_STATS_MESSAGE_ID = int(os.environ.get('DAILY_STATS_MESSAGE_ID', 0))  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
WEEKLY_STATS_MESSAGE_ID = int(os.environ.get('WEEKLY_STATS_MESSAGE_ID', 0))  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ
DEFAULT_THRESHOLD = int(os.environ.get('DEFAULT_THRESHOLD', 15))
INACTIVE_DAYS_THRESHOLD = int(os.environ.get('INACTIVE_DAYS_THRESHOLD', 3))
MAX_PDF_IMAGES = int(os.environ.get('MAX_PDF_IMAGES', 50))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –ë–î
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    db = sqlite3.connect('/mnt/data/screenshots.db', check_same_thread=False)
    #db = sqlite3.connect('screenshots.db', check_same_thread=False)
    cursor = db.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        screenshots_total INTEGER DEFAULT 0,
        screenshots_daily INTEGER DEFAULT 0,
        screenshots_weekly INTEGER DEFAULT 0,
        last_screenshot_date TEXT,
        join_date TEXT,
        discord_join_date TEXT,
        approved INTEGER DEFAULT 0,
        required_screens INTEGER DEFAULT 0,
        days_in_faction INTEGER DEFAULT 0,
        last_reminder_date TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS screenshots (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message_id INTEGER,
        url TEXT,
        date TEXT,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS daily_stats (
        date TEXT PRIMARY KEY,
        message_id INTEGER
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS weekly_stats (
        week_start TEXT PRIMARY KEY,
        message_id INTEGER
    )
    ''')

    db.commit()
    return db, cursor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db, cursor = init_db()

# ========== –ö–ù–û–ü–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø / –û–¢–ö–ê–ó–ê ==========
class ApprovalButtons(discord.ui.View):
    def __init__(self, target_user_id):
        super().__init__(timeout=None)
        self.target_user_id = target_user_id

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.success, custom_id="approve_confirm")
    async def approve(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = interaction.guild
        target_user = guild.get_member(self.target_user_id)
        role_test = guild.get_role(ROLE_TEST_ID)
        role_main = guild.get_role(ROLE_MAIN_ID)

        if not target_user:
            return await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

        if role_main:
            await target_user.add_roles(role_main)
        if role_test:
            await target_user.remove_roles(role_test)

        cursor.execute("UPDATE users SET approved = 1 WHERE user_id = ?", (self.target_user_id,))
        db.commit()

        try:
            await target_user.send("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ **–ú–µ–π–Ω** –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!")
        except discord.Forbidden:
            pass

        embed = interaction.message.embeds[0]
        embed.color = discord.Color.green()
        embed.set_footer(text=f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {interaction.user.display_name}")
        await interaction.message.edit(view=None, embed=embed)
        await interaction.response.send_message(f"–ò–≥—Ä–æ–∫ {target_user.mention} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω!", ephemeral=True)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="approve_deny")
    async def deny(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ReasonModal(self.target_user_id)
        await interaction.response.send_modal(modal)

class ReasonModal(discord.ui.Modal, title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"):
    def __init__(self, target_user_id):
        super().__init__()
        self.target_user_id = target_user_id

    required_screens = discord.ui.TextInput(
        label="–°–∫–æ–ª—å–∫–æ –¥–æ–ø. —Å–∫—Ä–∏–Ω–æ–≤ –Ω—É–∂–Ω–æ?",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
        required=True
    )
    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞",
        style=discord.TextStyle.paragraph,
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        target_user = guild.get_member(self.target_user_id)

        try:
            required = int(self.required_screens.value)
        except ValueError:
            return await interaction.response.send_message("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!", ephemeral=True)

        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∫—Ä–∏–Ω–æ–≤ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        cursor.execute(
            "UPDATE users SET required_screens = ?, screenshots_total = 0, screenshots_daily = 0, screenshots_weekly = 0 WHERE user_id = ?",
            (required, self.target_user_id)
        )
        cursor.execute("DELETE FROM screenshots WHERE user_id = ?", (self.target_user_id,))
        db.commit()

        try:
            await target_user.send(
                f"‚ùå –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ **–ú–µ–π–Ω** –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {self.reason.value}\n"
                f"**–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω–æ–≤:** {required}\n"
            )
        except discord.Forbidden:
            pass

        embed = interaction.message.embeds[0]
        embed.color = discord.Color.red()
        embed.set_footer(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {interaction.user.display_name} | –ù—É–∂–Ω–æ –µ—â—ë {required} —Å–∫—Ä–∏–Ω–æ–≤")
        await interaction.message.edit(view=None, embed=embed)
        await interaction.response.send_message(
            f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. {target_user.mention} –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë {required} —Å–∫—Ä–∏–Ω–æ–≤.",
            ephemeral=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        await update_daily_stats()
        await update_weekly_stats()

# ========== –£–õ–£–ß–®–ï–ù–ù–ê–Ø PDF –ì–ï–ù–ï–†–ê–¶–ò–Ø ==========
async def download_image(session, url, retries=3):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(retries):
        try:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=30)) as response:
                if response.status == 200:
                    return await response.read()
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: —Å—Ç–∞—Ç—É—Å {response.status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            await asyncio.sleep(1)
    return None

async def generate_pdf(user_id: int, screenshots: list[str]) -> str:
    """–°–æ–∑–¥–∞—ë—Ç PDF —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    pdf_path = f"screenshots_{user_id}_{int(time.time())}.pdf"
    c = canvas.Canvas(pdf_path, pagesize=landscape(A4))
    width, height = landscape(A4)
    
    print(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {len(screenshots)} —Å–∫—Ä–∏–Ω–∞–º–∏")
    
    successful_images = 0
    async with aiohttp.ClientSession() as session:
        for i, url in enumerate(screenshots[:MAX_PDF_IMAGES], start=1):
            try:
                print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{len(screenshots)}")
                image_data = await download_image(session, url)
                
                if not image_data:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}")
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                    temp_path = temp_file.name
                
                try:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img = Image.open(BytesIO(image_data))
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if img.mode in ("RGBA", "P"):
                        img = img.convert("RGB")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    img.save(temp_path, "JPEG", quality=85)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ PDF
                    c.drawImage(temp_path, 0, 0, width, height, preserveAspectRatio=True)
                    c.showPage()
                    
                    successful_images += 1
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} –≤ PDF")
                    
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.unlink(temp_path)
                    except:
                        pass
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}: {e}")
                continue
    
    if successful_images > 0:
        c.save()
        print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å {successful_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        return pdf_path
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF")
        return None

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
async def update_daily_stats():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    channel = bot.get_channel(CHANNEL_DAILY_STATS_ID)
    if not channel:
        return
    
    today = date.today().isoformat()
    guild = bot.get_guild(GUILD_ID)
    role_test = guild.get_role(ROLE_TEST_ID)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é —Ç–µ—Å—Ç
    users_data = []
    for member in guild.members:
        if role_test in member.roles:
            cursor.execute(
                "SELECT screenshots_daily FROM users WHERE user_id = ?",
                (member.id,)
            )
            row = cursor.fetchone()
            if row:
                screenshots_daily = row[0]
            else:
                screenshots_daily = 0
            users_data.append((member, screenshots_daily))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫—Ä–∏–Ω–æ–≤
    users_data.sort(key=lambda x: x[1], reverse=True)
    
    embed = discord.Embed(
        title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today})",
        color=discord.Color.blue()
    )
    
    if users_data:
        stats_text = ""
        for member, screens_daily in users_data:
            stats_text += f"**{member.mention}**: {screens_daily} —Å–∫—Ä–∏–Ω–æ–≤\n"
        embed.description = stats_text
    else:
        embed.description = "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–∫—Ä–∏–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("SELECT message_id FROM daily_stats WHERE date = ?", (today,))
    row = cursor.fetchone()
    
    if row and row[0]:
        try:
            message = await channel.fetch_message(row[0])
            await message.edit(embed=embed)
        except:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            message = await channel.send(embed=embed)
            cursor.execute("UPDATE daily_stats SET message_id = ? WHERE date = ?", (message.id, today))
    else:
        message = await channel.send(embed=embed)
        cursor.execute("INSERT OR REPLACE INTO daily_stats (date, message_id) VALUES (?, ?)", (today, message.id))
    
    db.commit()


async def update_weekly_stats():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    channel = bot.get_channel(CHANNEL_WEEKLY_STATS_ID)
    if not channel:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    today = date.today()
    week_start = today - timedelta(days=today.weekday())
    week_start_str = week_start.isoformat()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é —Ç–µ—Å—Ç
    guild = bot.get_guild(GUILD_ID)
    role_test = guild.get_role(ROLE_TEST_ID)
    
    test_users = []
    for member in guild.members:
        if role_test in member.roles:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            cursor.execute(
                "SELECT screenshots_weekly, join_date, discord_join_date, days_in_faction FROM users WHERE user_id = ?",
                (member.id,)
            )
            row = cursor.fetchone()
            
            if row:
                screens_weekly, join_date, discord_join_date, days_in_faction = row
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
                if not discord_join_date:
                    discord_join_date = member.joined_at.date().isoformat() if member.joined_at else date.today().isoformat()
                    cursor.execute(
                        "UPDATE users SET discord_join_date = ? WHERE user_id = ?",
                        (discord_join_date, member.id)
                    )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º
                join_date = date.today().isoformat()
                discord_join_date = member.joined_at.date().isoformat() if member.joined_at else date.today().isoformat()
                days_in_faction = 0
                screens_weekly = 0
                cursor.execute(
                    "INSERT INTO users (user_id, username, join_date, discord_join_date, days_in_faction, screenshots_weekly) VALUES (?, ?, ?, ?, ?, ?)",
                    (member.id, member.name, join_date, discord_join_date, days_in_faction, screens_weekly)
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ Discord
            if discord_join_date:
                join_date_obj = datetime.strptime(discord_join_date, '%Y-%m-%d').date()
                days_in_discord = (date.today() - join_date_obj).days
            else:
                days_in_discord = 0
            
            test_users.append({
                'id': member.id,
                'name': member.name,
                'screens_weekly': screens_weekly,
                'days_in_discord': days_in_discord,
                'days_in_faction': days_in_faction
            })
    
    db.commit()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫—Ä–∏–Ω–æ–≤
    test_users.sort(key=lambda x: x['screens_weekly'], reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º embed
    embed = discord.Embed(
        title=f"üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–Ω–µ–¥–µ–ª—è —Å {week_start_str})",
        color=discord.Color.gold()
    )
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–æ–Ω—ã
    green_zone = []
    yellow_zone = []
    red_zone = []
    
    for user in test_users:
        if user['screens_weekly'] >= 10:
            green_zone.append(user)
        elif user['screens_weekly'] >= 5:
            yellow_zone.append(user)
        else:
            red_zone.append(user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ embed
    if green_zone:
        green_text = "\n".join([f"‚úÖ <@{u['id']}>: {u['screens_weekly']} —Å–∫—Ä–∏–Ω–æ–≤ (–¥–Ω–µ–π –≤ Discord: {u['days_in_discord']})" for u in green_zone])
        embed.add_field(name="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ", value=green_text, inline=False)
    
    if yellow_zone:
        yellow_text = "\n".join([f"‚ö†Ô∏è <@{u['id']}>: {u['screens_weekly']} —Å–∫—Ä–∏–Ω–æ–≤ (–¥–Ω–µ–π –≤ Discord: {u['days_in_discord']})" for u in yellow_zone])
        embed.add_field(name="üü° –°—Ä–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤", value=yellow_text, inline=False)
    
    if red_zone:
        red_text = "\n".join([f"‚ùå <@{u['id']}>: {u['screens_weekly']} —Å–∫—Ä–∏–Ω–æ–≤ (–¥–Ω–µ–π –≤ Discord: {u['days_in_discord']})" for u in red_zone])
        embed.add_field(name="üî¥ –ú–∞–ª–µ–Ω—å–∫–∏–π –∞–∫—Ç–∏–≤", value=red_text, inline=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    cursor.execute("SELECT message_id FROM weekly_stats WHERE week_start = ?", (week_start_str,))
    row = cursor.fetchone()
    
    if row and row[0]:
        try:
            message = await channel.fetch_message(row[0])
            await message.edit(embed=embed)
        except:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            message = await channel.send(embed=embed)
            cursor.execute("UPDATE weekly_stats SET message_id = ? WHERE week_start = ?", (message.id, week_start_str))
    else:
        message = await channel.send(embed=embed)
        cursor.execute("INSERT OR REPLACE INTO weekly_stats (week_start, message_id) VALUES (?, ?)", (week_start_str, message.id))
    
    db.commit()

# ========== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –ù–ï–ê–ö–¢–ò–í–ù–û–°–¢–ò ==========
async def check_inactive_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    guild = bot.get_guild(GUILD_ID)
    role_test = guild.get_role(ROLE_TEST_ID)
    today = date.today()
    
    for member in guild.members:
        if role_test in member.roles:
            cursor.execute(
                "SELECT last_screenshot_date, last_reminder_date FROM users WHERE user_id = ?",
                (member.id,)
            )
            row = cursor.fetchone()
            
            if row:
                last_screenshot_date_str, last_reminder_date_str = row
                
                if last_screenshot_date_str:
                    last_screenshot_date = datetime.strptime(last_screenshot_date_str, '%Y-%m-%d').date()
                    days_inactive = (today - last_screenshot_date).days
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    should_send_reminder = False
                    if last_reminder_date_str:
                        last_reminder_date = datetime.strptime(last_reminder_date_str, '%Y-%m-%d').date()
                        if (today - last_reminder_date).days >= 1:  # –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
                            should_send_reminder = True
                    else:
                        should_send_reminder = True
                    
                    if days_inactive >= INACTIVE_DAYS_THRESHOLD and should_send_reminder:
                        try:
                            await member.send(
                                f"‚ö†Ô∏è **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n"
                                f"–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —É–∂–µ {days_inactive} –∏–ª–∏ –±–æ–ª—å—à–µ –¥–Ω–µ–π.\n"
                                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è."
                            )
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            cursor.execute(
                                "UPDATE users SET last_reminder_date = ? WHERE user_id = ?",
                                (today.isoformat(), member.id)
                            )
                            db.commit()
                        except discord.Forbidden:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name} (–∑–∞–∫—Ä—ã—Ç—ã–µ –õ–°)")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ========== –°–û–ë–´–¢–ò–Ø ==========
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await initialize_discord_join_dates()
    daily_tasks.start()
    inactive_check.start()
    await update_daily_stats()
    await update_weekly_stats()

async def initialize_discord_join_dates():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    guild = bot.get_guild(GUILD_ID)
    for member in guild.members:
        if member.joined_at:
            cursor.execute(
                "SELECT discord_join_date FROM users WHERE user_id = ?",
                (member.id,)
            )
            row = cursor.fetchone()
            if not row or not row[0]:
                discord_join_date = member.joined_at.date().isoformat()
                cursor.execute(
                    "INSERT OR REPLACE INTO users (user_id, username, discord_join_date) VALUES (?, ?, ?)",
                    (member.id, member.name, discord_join_date)
                )
    db.commit()

@bot.event
async def on_member_update(before, after):
    role_test = after.guild.get_role(ROLE_TEST_ID)
    
    if role_test not in before.roles and role_test in after.roles:
        join_date = date.today().isoformat()
        discord_join_date = after.joined_at.date().isoformat() if after.joined_at else date.today().isoformat()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, join_date, discord_join_date) VALUES (?, ?, ?, ?)",
            (after.id, after.name, join_date, discord_join_date)
        )
        db.commit()
        await update_weekly_stats()

    if role_test in before.roles and role_test not in after.roles:
        cursor.execute("SELECT approved FROM users WHERE user_id = ?", (after.id,))
        row = cursor.fetchone()
        if row and row[0] == 0:
            cursor.execute("DELETE FROM users WHERE user_id = ?", (after.id,))
            cursor.execute("DELETE FROM screenshots WHERE user_id = ?", (after.id,))
            db.commit()
            await update_weekly_stats()

@bot.event
async def on_message(message):
    if message.author.bot or message.channel.id != CHANNEL_REPORTS_ID:
        return

    role_test = message.guild.get_role(ROLE_TEST_ID)
    if role_test not in message.author.roles:
        return

    if not message.attachments:
        return

    today = date.today().isoformat()
    user_id = message.author.id
    username = message.author.name

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord
    discord_join_date = message.author.joined_at.date().isoformat() if message.author.joined_at else date.today().isoformat()
    cursor.execute(
        "UPDATE users SET username = ?, discord_join_date = ? WHERE user_id = ?",
        (username, discord_join_date, user_id)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    screenshot_count = 0
    for attachment in message.attachments:
        if attachment.content_type and attachment.content_type.startswith('image/'):
            cursor.execute(
                "INSERT INTO screenshots (user_id, message_id, url, date) VALUES (?, ?, ?, ?)",
                (user_id, message.id, attachment.url, today)
            )
            screenshot_count += 1

    if screenshot_count == 0:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    cursor.execute('''
        INSERT INTO users (user_id, username, screenshots_total, screenshots_daily, screenshots_weekly, last_screenshot_date)
        VALUES (?, ?, 1, 1, 1, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username = excluded.username,
            screenshots_total = screenshots_total + ?,
            screenshots_daily = screenshots_daily + ?,
            screenshots_weekly = screenshots_weekly + ?,
            last_screenshot_date = excluded.last_screenshot_date
    ''', (user_id, username, today, screenshot_count, screenshot_count, screenshot_count))
    db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    total_screens = cursor.execute('SELECT screenshots_total FROM users WHERE user_id = ?', (user_id,)).fetchone()[0]
    try:
        await message.reply(f"üì∏ {message.author.mention}, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã! –í—Å–µ–≥–æ —Å–∫—Ä–∏–Ω–æ–≤: {total_screens}", delete_after=10)
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await update_daily_stats()
    await update_weekly_stats()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    cursor.execute("SELECT screenshots_total, required_screens FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        total, required = row
        if (required and total >= required) or (not required and total >= DEFAULT_THRESHOLD):
            cursor.execute("SELECT url FROM screenshots WHERE user_id = ? ORDER BY date DESC, id DESC", (user_id,))
            urls = [row[0] for row in cursor.fetchall()]
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            asyncio.create_task(process_approval_request(message.author, total, user_id, urls))

async def process_approval_request(user, total_screens, user_id, urls):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        pdf_path = await generate_pdf(user_id, urls)
        if pdf_path:
            await send_approval_request(user, total_screens, pdf_path)
        else:
            await send_approval_request_without_pdf(user, total_screens)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await send_approval_request_without_pdf(user, total_screens)

async def send_approval_request_without_pdf(user, total_screens):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –±–µ–∑ PDF —Ñ–∞–π–ª–∞"""
    channel_approval = bot.get_channel(CHANNEL_APPROVAL_ID)
    embed = discord.Embed(
        title="üéØ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫–∞ (–ë–ï–ó PDF)",
        description=f"–ò–≥—Ä–æ–∫ {user.mention} (`{user}`) –æ—Ç–ø—Ä–∞–≤–∏–ª {total_screens} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.\n\n‚ö†Ô∏è **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF —Ñ–∞–π–ª!**",
        color=discord.Color.orange()
    )
    embed.set_thumbnail(url=user.avatar.url)
    view = ApprovalButtons(user.id)
    await channel_approval.send(embed=embed, view=view)

async def send_approval_request(user, total_screens, pdf_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É —Å PDF —Ñ–∞–π–ª–æ–º"""
    channel_approval = bot.get_channel(CHANNEL_APPROVAL_ID)
    embed = discord.Embed(
        title="üéØ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫–∞",
        description=f"–ò–≥—Ä–æ–∫ {user.mention} (`{user}`) –æ—Ç–ø—Ä–∞–≤–∏–ª {total_screens} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
        color=discord.Color.orange()
    )
    embed.set_thumbnail(url=user.avatar.url)
    view = ApprovalButtons(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(pdf_path) / (1024 * 1024)
    if file_size > 25:
        await channel_approval.send(embed=embed, view=view)
    else:
        await channel_approval.send(embed=embed, view=view, file=discord.File(pdf_path))
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Ñ–∞–π–ª
    try:
        os.remove(pdf_path)
    except:
        pass

# ========== –¢–ê–°–ö–ò ==========
@tasks.loop(hours=24)
async def daily_tasks():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    cursor.execute("UPDATE users SET screenshots_daily = 0")
    
    guild = bot.get_guild(GUILD_ID)
    role_test = guild.get_role(ROLE_TEST_ID)
    
    for member in guild.members:
        if role_test in member.roles:
            cursor.execute(
                "UPDATE users SET days_in_faction = days_in_faction + 1 WHERE user_id = ?",
                (member.id,)
            )
    
    db.commit()
    await update_daily_stats()
    await update_weekly_stats()

@tasks.loop(hours=12)
async def inactive_check():
    await check_inactive_users()

@daily_tasks.before_loop
async def before_daily_tasks():
    await bot.wait_until_ready()
    now = datetime.now()
    if now.hour > 0 or now.minute > 0:
        next_run = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        await discord.utils.sleep_until(next_run)

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.command()
@commands.has_permissions(administrator=True)
async def stats(ctx):
    await update_daily_stats()
    await update_weekly_stats()
    await ctx.send("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@bot.command()
@commands.has_permissions(administrator=True)
async def fix_dates(ctx):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await initialize_discord_join_dates()
    await ctx.send("‚úÖ –î–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Discord –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

# ========== –°–¢–ê–†–¢ ==========
if __name__ == "__main__":
    bot.run(TOKEN)